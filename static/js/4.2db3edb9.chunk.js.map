{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","changed","invalid","shouldValidate","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","onChange","join","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.2db3edb9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\",\"Input\":\"Auth_Input__2LQ-q\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from \"../../shared/utility\";\n\n\nclass Auth extends Component {\n\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        isSignUp: true\n    }\n\n    componentDidMount() {\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        })\n\n        this.setState({controls: updatedControls})\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault()\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp)\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignUp: !prevState.isSignUp}\n        })\n    }\n\n    render() {\n\n        const formElementsArray = [];\n\n        for(let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n            />\n        ))\n\n        if(this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n\n        if(this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            )\n        }\n\n        let authRedirect = null;\n\n        if(this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                    <Button\n                        clicked={this.switchAuthModeHandler}\n                        btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGN IN' : 'SIGN UP'}</Button>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from \"react\";\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n\n    let inputElement = null;\n    let inputClasses = [classes.InputElement];\n\n    if(props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch(props.elementType) {\n        case('input'):\n            inputElement = <input onChange={props.changed} className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}/>;\n            break;\n        case('textarea'):\n            inputElement = <textarea onChange={props.changed} className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}/>;\n            break;\n        case('select'):\n            inputElement = (\n                <select onChange={props.changed} className={inputClasses.join(' ')} value={props.value}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input onChange={props.changed} className={classes.InputElement} {...props.elementConfig} value={props.value}/>;\n    }\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};"],"sourceRoot":""}