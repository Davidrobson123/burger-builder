{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","street","postcode","minLength","maxLength","country","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updateFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","changed","invalid","shouldValidate","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","onChange","join","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.b4d8f3d8.chunk.js","sourcesContent":["import React from 'react';\nimport Burger from \"../../Burger/Burger\";\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes good!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button\n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button\n                btnType=\"Success\n                \"clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { Component } from \"react\";\nimport axios from '../../../axios-orders';\n\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Email'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            postcode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Post Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 7\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'},\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true,\n            },\n        },\n        formIsValid: false\n    }\n\n\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n\n        for(let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\n        }\n\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token)\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n\n        const updateFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        })\n\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updateFormElement\n        })\n\n        let formIsValid = true;\n\n        for(let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid})\n    }\n\n    render(){\n\n        const formElementsArray = [];\n\n        for(let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input elementType={formElement.config.elementType}\n                           elementConfig={formElement.config.elementConfig}\n                           value={formElement.config.value}\n                           key={formElement.id}\n                           changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                           invalid={!formElement.config.valid}\n                           shouldValidate={formElement.config.validation}\n                           touched={formElement.config.touched}\n                    />\n                ))}\n                <Button btnType=\"Success\" clicked={this.orderHandler} disabled={!this.state.formIsValid} >ORDER</Button>\n            </form>\n        );\n\n        if(this.props.loading) {\n            form = <Spinner />\n        }\n\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your contact data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, {Component} from 'react';\nimport { Route, Redirect } from \"react-router-dom\";\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from \"./ContactData/ContactData\";\nimport { connect } from 'react-redux';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n    render() {\n        let summary = <Redirect to=\"/\" />\n        if(this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                <CheckoutSummary\n                    checkoutCancelled={this.checkoutCancelledHandler}\n                    checkoutContinued={this.checkoutContinuedHandler}\n                    ingredients={this.props.ings}\n                />\n                <Route\n                    path={this.props.match.path + '/contact-data'}\n                    component={ContactData}/>\n                </div>\n            )\n        }\n        return summary;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\nexport default connect(mapStateToProps)(Checkout);","import React from \"react\";\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n\n    let inputElement = null;\n    let inputClasses = [classes.InputElement];\n\n    if(props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch(props.elementType) {\n        case('input'):\n            inputElement = <input onChange={props.changed} className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}/>;\n            break;\n        case('textarea'):\n            inputElement = <textarea onChange={props.changed} className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}/>;\n            break;\n        case('select'):\n            inputElement = (\n                <select onChange={props.changed} className={inputClasses.join(' ')} value={props.value}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input onChange={props.changed} className={classes.InputElement} {...props.elementConfig} value={props.value}/>;\n    }\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\",\"Input\":\"ContactData_Input__2fK5-\"};"],"sourceRoot":""}